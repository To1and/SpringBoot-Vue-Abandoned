package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */


#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}
{
    #else
public class ${table.controllerName}
{
    #end

    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    //实现新增或者更新数据
    @PostMapping
    public boolean saveOrUpdateInfo(@RequestBody ${entity} ${table.entityPath})
    {
        return ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
    }

    //实现查询返回有数据
    @GetMapping
    public List<${entity}> listAllInfo()
    {
        return ${table.entityPath}Service.list();
    }

    //实现根据ID删除单个条目
    @DeleteMapping("/del/{id}")
    public boolean removeInfoById(@PathVariable Integer id)
    {
        return ${table.entityPath}Service.removeById(id);
    }

    //实现根据多个ID删除多个条目
    @DeleteMapping("/del/batch")
    public boolean removeInfoByIds(@PathVariable List<Integer> ids)
    {
        return ${table.entityPath}Service.removeByIds(ids);
    }

    //实现根据ID查询唯一条目
    @GetMapping("/get/{id}")
    public ${entity} getOneInfoById(@PathVariable Integer id)
    {
        return ${table.entityPath}Service.getById(id);
    }

    //实现基础分页查询
    @GetMapping("/page")
    public Page<${entity}> findPage(@RequestParam Integer pageNumber,
                                    @RequestParam Integer pageSize,
                                    @RequestParam(required = false, defaultValue = "") String username,
                                    @RequestParam(required = false, defaultValue = "") String nickname,
                                    @RequestParam(required = false, defaultValue = "") String address)
    {
        QueryWrapper<User> queryWrapper=new QueryWrapper<>();

        //此处为自定义添加的限定搜索方法
        if (!"".equals(username))
        {
        queryWrapper.like("username", username);
        }
        if (!"".equals(nickname))
        {
        queryWrapper.like("nickname", nickname);
        }
        if (!"".equals(address))
        {
        queryWrapper.like("address", address);
        }
//      queryWrapper.or().like("address", address);

        queryWrapper.orderByDesc("id");
        return ${table.entityPath}Service.page(new Page<>(pageNumber,pageSize),queryWrapper);
    }

}
#end